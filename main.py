import telebot
from telebot import types
import os

waiting_for_contact = False
class Product:
    def __init__(self, name, description, image_filename):
        self.name = name
        self.description = description
        self.image_filename = image_filename

class ProductList:
    def __init__(self):
        self.products = []

    def add_product(self, product):
        self.products.append(product)

class Cart:
    def __init__(self):
        self.items = {}

class UserCart:
    def __init__(self):
        self.items = {}

    def add_item(self, product_index, quantity):
        if product_index in self.items:
            self.items[product_index] = max(0, quantity)
        else:
            self.items[product_index] = max(0, quantity)

    def remove_item(self, product_index):
        if product_index in self.items:
            del self.items[product_index]

    def calculate_total(self):
        total = 0
        for product_index, quantity in self.items.items():
            total += quantity * calculate_item_price(quantity)
        return total

def calculate_item_price(quantity):
    if quantity > 9:
        return 70
    else:
        return 80

user_carts = {}

cart = Cart()

product_list = ProductList()


# –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã
product_list.add_product(Product('Sakura grape (–°–∞–∫—É—Ä–∞ –∏ –≤–∏–Ω–æ–≥—Ä–∞–¥)', '–Ø—Ä–∫–∞—è –≤–∏—à–Ω—ë–≤–∞—è —Å–ª–∞–¥–æ—Å—Ç—å —Å –æ—Ç—Ç–µ–Ω–∫–∞–º–∏ –≤–∏–Ω–æ–≥—Ä–∞–¥–∞.\n\n–¶–µ–Ω–∞ 80‚Ç™/—à—Ç \n–ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ –æ—Ç 10 –ø–æ–∑–∏—Ü–∏–π - 70‚Ç™/—à—Ç', 'images/sakura-grape.jpg'))
product_list.add_product(Product('Watermelon ice (–ê—Ä–±—É–∑–Ω—ã–π –ª–µ–¥)', '–û—Å–≤–µ–∂–∞—é—â–∏–π –∞—Ä–±—É–∑, –ø—Ä–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ö–ª–∞–¥–Ω—ã–º –º–µ–Ω—Ç–æ–ª–æ–≤—ã–º —Ö–æ–ª–æ–¥–∫–æ–º.\n\n–¶–µ–Ω–∞ 80‚Ç™/—à—Ç \n–ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ –æ—Ç 10 –ø–æ–∑–∏—Ü–∏–π - 70‚Ç™/—à—Ç', 'images/watermelon-ice.jpg'))
product_list.add_product(Product('Red mojito (–ö—Ä–∞—Å–Ω—ã–π –º–æ—Ö–∏—Ç–æ)', '–≠–∫–∑–æ—Ç–∏—á–µ—Å–∫–∏–π –º–æ—Ö–∏—Ç–æ —Å –∫—Ä–∞—Å–Ω—ã–º–∏ —Ñ—Ä—É–∫—Ç–∞–º–∏ –∏ –ª–µ–≥–∫–æ–π –∫–∏—Å–ª–∏–Ω–∫–æ–π.\n\n–¶–µ–Ω–∞ 80‚Ç™/—à—Ç \n–ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ –æ—Ç 10 –ø–æ–∑–∏—Ü–∏–π - 70‚Ç™/—à—Ç', 'images/red-mogito.jpg'))
product_list.add_product(Product('Blue razz ice (–°–∏–Ω–µ-–º–∞–ª–∏–Ω–æ–≤—ã–π –ª–µ–¥)', '–°–æ—á–Ω–∞—è –º–∞–ª–∏–Ω–∞, –æ–±–≤–æ–ª–∞–∫–∏–≤–∞–µ–º–∞—è –º–æ—Ä–æ–∂–µ–Ω–æ–π —Å–≤–µ–∂–µ—Å—Ç—å—é.\n\n–¶–µ–Ω–∞ 80‚Ç™/—à—Ç \n–ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ –æ—Ç 10 –ø–æ–∑–∏—Ü–∏–π - 70‚Ç™/—à—Ç', 'images/blue-razz-ice.jpg'))
product_list.add_product(Product('Lemon mint (–õ–∏–º–æ–Ω —Å –º—è—Ç–æ–π)', '–Ø—Ä–∫–∏–π –ª–∏–º–æ–Ω, –ø—Ä–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∞—Ä–æ–º–∞—Ç–Ω–æ–π –º—è—Ç–æ–π.\n\n–¶–µ–Ω–∞ 80‚Ç™/—à—Ç \n–ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ –æ—Ç 10 –ø–æ–∑–∏—Ü–∏–π - 70‚Ç™/—à—Ç', 'images/lemon-mint.jpg'))
product_list.add_product(Product('Mango peach (–ú–∞–Ω–≥–æ —Å –ø–µ—Ä—Å–∏–∫–æ–º)', '–°–ª–∞–¥–∫–∏–π –º–∞–Ω–≥–æ –∏ —Å–ø–µ–ª—ã–π –ø–µ—Ä—Å–∏–∫ –≤ –æ–¥–Ω–æ–º –≤–¥–æ—Ö–µ.\n\n–¶–µ–Ω–∞ 80‚Ç™/—à—Ç \n–ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ –æ—Ç 10 –ø–æ–∑–∏—Ü–∏–π - 70‚Ç™/—à—Ç', 'images/mango-peach.jpg'))
product_list.add_product(Product('Cranberry grape (–ö–ª—é–∫–≤–µ–Ω–Ω–æ-–≤–∏–Ω–æ–≥—Ä–∞–¥–Ω—ã–π)', '–°–º–µ—Å—å –∫–ª—é–∫–≤—ã –∏ –≤–∏–Ω–æ–≥—Ä–∞–¥–∞ —Å –ª–µ–≥–∫–æ–π –∫–∏—Å–ª–∏–Ω–∫–æ–π.\n\n–¶–µ–Ω–∞ 80‚Ç™/—à—Ç \n–ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ –æ—Ç 10 –ø–æ–∑–∏—Ü–∏–π - 70‚Ç™/—à—Ç', 'images/cranberry-grape.jpg'))
product_list.add_product(Product('Tropical rainbow blast (–¢—Ä–æ–ø–∏—á–µ—Å–∫–∏–π —Ä–∞–¥—É–∂–Ω—ã–π –≤–∑—Ä—ã–≤)', '–í–∑—Ä—ã–≤ —Ç—Ä–æ–ø–∏—á–µ—Å–∫–∏—Ö —Ñ—Ä—É–∫—Ç–æ–≤—ã—Ö –≤–∫—É—Å–æ–≤ –≤ –∫–∞–∂–¥–æ–π –∑–∞—Ç—è–∂–∫–µ.\n\n–¶–µ–Ω–∞ 80‚Ç™/—à—Ç \n–ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ –æ—Ç 10 –ø–æ–∑–∏—Ü–∏–π - 70‚Ç™/—à—Ç', 'images/tropical_blast.jpg'))
product_list.add_product(Product('Watermelon bubblegum (–ê—Ä–±—É–∑–Ω–∞—è –∂–≤–∞—á–∫–∞)', '–í–∫—É—Å —Å–ª–∞–¥–∫–æ–π –∂–≤–∞—á–∫–∏, —Å–æ—á–µ—Ç–∞—é—â–µ–π—Å—è —Å –∞—Ä–±—É–∑–Ω–æ–π —Å–ª–∞–¥–æ—Å—Ç—å—é.\n\n–¶–µ–Ω–∞ 80‚Ç™/—à—Ç \n–ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ –æ—Ç 10 –ø–æ–∑–∏—Ü–∏–π - 70‚Ç™/—à—Ç', 'images/watermelon-bubblegum.jpg'))
product_list.add_product(Product('Peach ice (–ü–µ—Ä—Å–∏–∫–æ–≤—ã–π –ª–µ–¥)', '–°–æ—á–Ω—ã–π –ø–µ—Ä—Å–∏–∫ —Å –æ—Å–≤–µ–∂–∞—é—â–∏–º –ª–µ–¥—è–Ω—ã–º —Ö–æ–ª–æ–¥–∫–æ–º.\n\n–¶–µ–Ω–∞ 80‚Ç™/—à—Ç \n–ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ –æ—Ç 10 –ø–æ–∑–∏—Ü–∏–π - 70‚Ç™/—à—Ç', 'images/peach-ice.jpg'))
product_list.add_product(Product('Strawberry banana (–ö–ª—É–±–Ω–∏–∫–∞ —Å –±–∞–Ω–∞–Ω–æ–º)', '–°–ª–∞–¥–∫–∞—è –∫–ª—É–±–Ω–∏–∫–∞ –∏ –∫—Ä–µ–º–æ–≤—ã–π –±–∞–Ω–∞–Ω –≤ –æ–¥–Ω–æ–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π —Å–∏–≥–∞—Ä–µ—Ç–µ.\n\n–¶–µ–Ω–∞ 80‚Ç™/—à—Ç \n–ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ –æ—Ç 10 –ø–æ–∑–∏—Ü–∏–π - 70‚Ç™/—à—Ç', 'images/strawberry-banana.jpg'))
product_list.add_product(Product('Triple berry ice (–¢—Ä–æ–π–Ω–æ–π —è–≥–æ–¥–Ω—ã–π –ª–µ–¥)', '–°–º–µ—Å—å —Ç—Ä—ë—Ö —è–≥–æ–¥, –∑–∞–≤—ë—Ä–Ω—É—Ç–∞—è –≤ —Ö–æ–ª–æ–¥–Ω–æ–µ –º–æ—Ä–æ–∂–µ–Ω–æ–µ.\n\n–¶–µ–Ω–∞ 80‚Ç™/—à—Ç \n–ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ –æ—Ç 10 –ø–æ–∑–∏—Ü–∏–π - 70‚Ç™/—à—Ç', 'images/triple-berry-ice.jpg'))
product_list.add_product(Product('Blueberry ice (–ß–µ—Ä–Ω–∏—á–Ω—ã–π –ª–µ–¥)', '–°–æ—á–Ω–∞—è —á–µ—Ä–Ω–∏–∫–∞ —Å –º–µ–Ω—Ç–æ–ª–æ–≤—ã–º –ª–µ–¥—è–Ω—ã–º –∞–∫—Ü–µ–Ω—Ç–æ–º.\n\n–¶–µ–Ω–∞ 80‚Ç™/—à—Ç \n–ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ –æ—Ç 10 –ø–æ–∑–∏—Ü–∏–π - 70‚Ç™/—à—Ç', 'images/Blueberry-ice.jpg'))
product_list.add_product(Product('Summer peach ice (–õ–µ—Ç–Ω–∏–π –ø–µ—Ä—Å–∏–∫–æ–≤—ã–π –ª–µ–¥)', '–õ–µ—Ç–Ω–∏–π –±—Ä–∏–∑ —Å –∞—Ä–æ–º–∞—Ç–æ–º —Å–ø–µ–ª–æ–≥–æ –ø–µ—Ä—Å–∏–∫–∞ –∏ –ª–µ–≥–∫–æ–π –º–µ–Ω—Ç–æ–ª–æ–≤–æ–π –ø—Ä–æ—Ö–ª–∞–¥–æ–π.\n\n–¶–µ–Ω–∞ 80‚Ç™/—à—Ç \n–ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ –æ—Ç 10 –ø–æ–∑–∏—Ü–∏–π - 70‚Ç™/—à—Ç', 'images/Summer-peach-ice.jpg'))


bot = telebot.TeleBot('token')


@bot.message_handler(commands=['contact'])
def request_contact(message):
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    contact_button = types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)
    markup.add(contact_button)
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.", reply_markup=markup)


@bot.message_handler(func=lambda message: True, content_types=['contact'])
def process_contact(message):
    contact = message.contact
    phone_number = contact.phone_number if contact and contact.phone_number else None
    avatarname = message.from_user.username if message.from_user.username else "–Ω–µ—Ç –Ω–∏–∫–Ω–µ–π–º–∞"
    username = f"{contact.first_name} {contact.last_name}" if contact and (contact.first_name or contact.last_name) else "–Ω–µ—Ç username"
    telegram_username = contact.username if contact and hasattr(contact, 'username') and contact.username else "–Ω–µ—Ç Telegram username"

    bot.send_message(message.chat.id, f"–°–ø–∞—Å–∏–±–æ! –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ({phone_number}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É.\n"
                     f'–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!ü§òüèæ\n')

    # –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–∞–∫—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
    bot.send_message("manager_id", f'ü§òüèæ–ö–ª–∏–µ–Ω—Ç –ø—Ä–æ—Å–∏—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∏–º –¥–ª—è –∑–∞–∫–∞–∑–∞:\n'
                                f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}\n'
                                f'Username: {username}\n'
                                f'–ù–∏–∫: @{avatarname}\n')





@bot.message_handler(commands=['start'])
def welcome(message):
    user_id = message.chat.id
    user_carts[user_id] = UserCart()
    send_welcome(user_id)

def send_welcome(chat_id):
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('üì±–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º–º', url='https://instagram.com/elfbr_israel?igshid=OGQ5ZDc2ODk2ZA==')
    markup.row(btn1)
    btn2 = types.InlineKeyboardButton('üõí–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤', callback_data='main_menu')
    markup.row(btn2)

    file = open('./elfbar.jpg', 'rb')
    bot.send_photo(chat_id, file, reply_markup=markup, caption='üõí–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç-–±–æ—Ç Telegram, –ø–æ –∑–∞–∫–∞–∑—É ELFBAR –≤ –ò–∑—Ä–∞–∏–ª–µ\n\n'
   '‚úÖ –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º —Ç–æ–≤–∞—Ä–æ–≤, –∑–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É, —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º!')

@bot.callback_query_handler(func=lambda call: call.data == 'main_menu')
def main_menu(callback):
    send_product_menu(callback.message.chat.id)

@bot.callback_query_handler(func=lambda call: call.data == 'back_to_menu')
def back_to_menu(callback):
    send_welcome(callback.message.chat.id)

def send_product_menu(chat_id):
    markup = types.InlineKeyboardMarkup()
    for i, product in enumerate(product_list.products):
        btn = types.InlineKeyboardButton(product.name, callback_data=f'product_{i}')
        markup.add(btn)
    file = open('./elfbar_flavours.jpg', 'rb')
    btn15 = types.InlineKeyboardButton('‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data='back_to_menu')
    markup.add(btn15)
    bot.send_photo(chat_id, file, reply_markup=markup, caption='1Ô∏è‚É£–¶–µ–Ω–∞ –∑–∞ 1 - 80‚Ç™‚Ç™\nüîü–ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ –æ—Ç 10 –ø–æ–∑–∏—Ü–∏–π - 70‚Ç™/—à—Ç\n\n–î–æ—Å—Ç–∞–≤–∫–∞ –æ—Ç 5—à—Ç - –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è\n\nüõí–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞:')



@bot.callback_query_handler(func=lambda call: call.data.startswith('product_'))
def product_description(callback):
    product_index = int(callback.data.split('_')[1])
    send_product_description(callback.message.chat.id, product_index, quantity=1)

def send_product_description(chat_id, product_index, quantity):
    product = product_list.products[product_index]
    description = f"{product.name}\n\n{product.description}"
    markup = create_product_description_markup(product_index, quantity)

    image_path = os.path.join(os.getcwd(), product.image_filename)
    bot.send_photo(chat_id, open(image_path, 'rb'), reply_markup=markup, caption=description)

def create_product_description_markup(product_index, quantity):
    markup = types.InlineKeyboardMarkup()

    # –†—è–¥ —Å –∫–Ω–æ–ø–∫–æ–π "–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É"
    add_to_cart_button = types.InlineKeyboardButton('üõí–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É',
                                                    callback_data=f'add_to_cart_{product_index}')
    markup.row(add_to_cart_button)
    # –†—è–¥ —Å –∫–Ω–æ–ø–∫–æ–π "–Ω–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥"
    back_to_catalog_button = types.InlineKeyboardButton('‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥', callback_data='back_to_catalog')
    markup.row(back_to_catalog_button)

    return markup

@bot.callback_query_handler(func=lambda call: call.data.startswith('add_to_cart_'))
def add_to_cart(callback):
    product_index = int(callback.data.split('_')[-1])
    user_id = callback.message.chat.id
    if user_id not in user_carts:
        user_carts[user_id] = UserCart()
    user_carts[user_id].add_item(product_index, 1)

    send_quantity_selection(callback.message, product_index, callback.message.chat.id, quantity=1)
    bot.delete_message(callback.message.chat.id, callback.message.message_id)




def send_quantity_selection(message, product_index, chat_id, quantity):
    product = product_list.products[product_index]
    description = f"{product.name}\n\n{product.description}"
    markup = create_quantity_selection_markup(product_index, quantity)

    image_path = os.path.join(os.getcwd(), product.image_filename)

    bot.send_photo(chat_id, open(image_path, 'rb'), caption=description, reply_markup=markup)


def create_quantity_selection_markup(product_index, quantity):
    markup = types.InlineKeyboardMarkup()

    if quantity > 0:
        # –†—è–¥ —Å –∫–Ω–æ–ø–∫–∞–º–∏ "+", "-", –∏ "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π"
        quantity_buttons = [
            types.InlineKeyboardButton('‚ûñ', callback_data=f'change_quantity_{product_index}_{quantity - 1}'),
            types.InlineKeyboardButton(f'{quantity}', callback_data=f'change_quantity_{product_index}_{quantity}'),
            types.InlineKeyboardButton('‚ûï', callback_data=f'change_quantity_{product_index}_{quantity + 1}'),
        ]
        markup.row(*quantity_buttons)

    else:
        # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ —Ä–∞–≤–Ω–æ 0, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É"
        add_to_cart_button = types.InlineKeyboardButton('üõí–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É',
                                                        callback_data=f'add_to_cart_{product_index}')
        markup.row(add_to_cart_button)

    # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –±–æ–ª—å—à–µ 0, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–£–¥–∞–ª–∏—Ç—å"
    if quantity > 0:
        delete_button = types.InlineKeyboardButton('‚ùå–£–¥–∞–ª–∏—Ç—å', callback_data=f'delete_product_{product_index}')
        markup.row(delete_button)

    # –†—è–¥ —Å –∫–Ω–æ–ø–∫–æ–π "–ø–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É"
    go_to_cart_button = types.InlineKeyboardButton('üõç–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É', callback_data='go_to_cart')
    markup.row(go_to_cart_button)

    # –†—è–¥ —Å –∫–Ω–æ–ø–∫–æ–π "–Ω–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥"
    back_to_catalog_button = types.InlineKeyboardButton('‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥', callback_data='back_to_catalog')
    markup.row(back_to_catalog_button)

    return markup


@bot.callback_query_handler(func=lambda call: call.data.startswith('delete_product_'))
def delete_product(callback):
    product_index = int(callback.data.split('_')[-1])
    user_carts[callback.message.chat.id].remove_item(product_index)

    # –û–±–Ω–æ–≤–∏–º –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞
    send_quantity_selection(callback.message, product_index, callback.message.chat.id, quantity=0)





@bot.callback_query_handler(
    func=lambda call: call.data.startswith('change_quantity_'))
def handle_quantity_callback(call):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback data
        data_parts = call.data.split('_')
        product_index = int(data_parts[2])
        new_quantity = int(data_parts[3])

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        user_carts[call.message.chat.id].add_item(product_index, new_quantity)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ä–∞–∑–º–µ—Ç–∫—É –±–ª–æ–∫–∞ –∫–Ω–æ–ø–æ–∫
        markup = create_quantity_selection_markup(product_index, new_quantity)
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=markup)

    except IndexError:
        print("IndexError: list index out of range")

    except Exception as e:
        print(e)




def create_cart_quantity_markup(product_index, quantity):
    markup = types.InlineKeyboardMarkup()

    # –†—è–¥ —Å –∫–Ω–æ–ø–∫–∞–º–∏ "+", "-", –∏ "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π"
    quantity_buttons = [
        types.InlineKeyboardButton('‚ûñ', callback_data=f'change_quantity_{product_index}_{quantity - 1}'),
        types.InlineKeyboardButton(f'{quantity}', callback_data=f'change_quantity_{product_index}_{quantity}'),
        types.InlineKeyboardButton('‚ûï', callback_data=f'change_quantity_{product_index}_{quantity + 1}'),
    ]
    markup.row(*quantity_buttons)

    return markup

@bot.callback_query_handler(func=lambda call: call.data == 'go_to_cart')
def go_to_cart(callback):
    send_cart_contents(callback.message.chat.id)

@bot.callback_query_handler(func=lambda call: call.data == 'contact_manager')
def contact_manager(callback):
    global waiting_for_contact
    waiting_for_contact = True
    send_cart_contents(callback.message.chat.id)


def send_cart_contents(chat_id):
    global waiting_for_contact

    if waiting_for_contact:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç"
        contact_button = types.KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç', request_contact=True)
        contact_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        contact_markup.add(contact_button)
        bot.send_message(chat_id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç".',
                        reply_markup=contact_markup)

        # –ü–µ—Ä–µ–¥–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        bot.register_next_step_handler_by_chat_id(chat_id,
                                                  lambda message: handle_contact(message, None))

        waiting_for_contact = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        return

    if not user_carts[chat_id].items:
        bot.send_message(chat_id, '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.')
        return

    total_quantity = sum(user_carts[chat_id].items.values())  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
    total_price = calculate_total_price(total_quantity)  # –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞

    message_text = f"–í–∞—à –∑–∞–∫–∞–∑:\n\n"

    for product_index, quantity in user_carts[chat_id].items.items():
        product = product_list.products[product_index]
        item_total = quantity * calculate_item_price(quantity)  # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞
        message_text += f"{product.name} - {quantity} —à—Ç. - {item_total}‚Ç™\n"


    if total_quantity > 0:  # –î–æ–±–∞–≤–∏–ª–∏ —É—Å–ª–æ–≤–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        message_text += f"\n–ò—Ç–æ–≥–æ: {total_price}‚Ç™"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"
        markup = types.InlineKeyboardMarkup()
        contact_manager_button = types.InlineKeyboardButton('üôãüèª‚Äç‚ôÇÔ∏è–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞',
                                                            callback_data='contact_manager')
        markup.row(contact_manager_button)
    else:
        bot.send_message(chat_id, '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.')
        return

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥" –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
    back_to_catalog_button = types.InlineKeyboardButton('‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥', callback_data='back_to_catalog')
    markup.row(back_to_catalog_button)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Ç–æ–≥–∞–º–∏ –∑–∞–∫–∞–∑–∞ –∏ –∫–Ω–æ–ø–∫–æ–π "–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º" –∏–ª–∏ –±–µ–∑ –Ω–µ–µ
    bot.send_message(chat_id, message_text, reply_markup=markup)


def calculate_total_price(total_quantity):
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞
    if total_quantity > 9:
        return total_quantity * 70
    else:
        return total_quantity * 80


@bot.message_handler(func=lambda message: True, content_types=['contact'])
def handle_contact(message, details):
    global waiting_for_contact

    details = []
    chat_id = message.chat.id

    for product_index, quantity in user_carts[chat_id].items.items():
        product = product_list.products[product_index]
        item_total = quantity * calculate_item_price(quantity)

        details.append(f"{product.name} - {quantity} —à—Ç. - {item_total}‚Ç™")


    contact = message.contact
    if contact:
        phone_number = contact.phone_number if contact and contact.phone_number else None
        username = f"{contact.first_name} {contact.last_name}" if contact and (contact.first_name or contact.last_name) else "–Ω–µ—Ç username"
        telegram_username = contact.username if contact and hasattr(contact, 'username') and contact.username else "–Ω–µ—Ç Telegram username"
        avatarname = message.from_user.username if message.from_user.username else "–Ω–µ—Ç –Ω–∏–∫–Ω–µ–π–º–∞"


        total_quantity = sum(user_carts[message.chat.id].items.values())
        total_price = calculate_total_price(total_quantity)

        user_carts.pop(chat_id)

        if total_quantity > 9:
            bot.send_message(message.chat.id,
                             f'üñ§–°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n'
                             f'–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_quantity}\n'
                             f'–û–±—â–∞—è —Ü–µ–Ω–∞: {total_price}‚Ç™\n')
        else:
            bot.send_message(message.chat.id,
                             f'üñ§–°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n'
                             f'–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_quantity}\n'
                             f'–û–±—â–∞—è —Ü–µ–Ω–∞: {total_price}‚Ç™\n'
                             f'–ü—Ä–∏ –∑–∞–∫–∞–∑–µ –æ—Ç 10 —à—Ç: 70‚Ç™/—à—Ç—É–∫–∞')

        # –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–∞–∫—Ç–µ, –∑–∞–∫–∞–∑–µ, username, –æ–±—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∏ —Ü–µ–Ω–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
        bot.send_message(manager_id, f'ü§òüèæ–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:\n'
                                    f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}\n'
                                    f'Username: {username}\n'
                                    f'–ù–∏–∫: @{avatarname}\n'
                                    f'–ó–∞–∫–∞–∑:\n{"\n".join(details)}\n'
                                    f'–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_quantity}\n'
                                    f'–û–±—â–∞—è —Ü–µ–Ω–∞: {total_price}‚Ç™\n')

        waiting_for_contact = False
    else:
        bot.send_message(message.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–∞–∫—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.')



@bot.callback_query_handler(func=lambda call: call.data == 'back_to_catalog')
def back_to_catalog(callback):
    send_product_menu(callback.message.chat.id)

def reset_cart():
    global cart
    cart = Cart()

if __name__ == "__main__":
    while True:
        try:
            print("Start bot")
            bot.polling(none_stop=True)
        except KeyboardInterrupt:
            exit(0)
        except Exception as ex:
            print("Error: ", ex)
            pass
